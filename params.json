{"name":"PyUSB2AX","tagline":"A python wrapper for the dynamixel SDK to work with the USB2AX interface ","body":"# PyUSB2AX\r\n\r\nA simple wrapper to access Dynamixel AX servos using the USB2AX interface under Linux.\r\n\r\n_N.B. This is a python module that wraps a Linux C library - it will not help you access Dynamixels from other operating systems._\r\n\r\nThis is a build script and simple python module that allows you to easily control Dynamixel AX-12 servos (and possibly other models) using a \r\n[USB2AX](http://xevelabs.com/doku.php?id=product:usb2ax:usb2ax). It wraps the standard dynamixel C library \r\navailable [here](http://support.robotis.com/en/software/dynamixel_sdk/usb2dynamixel/usb2dxl_linux.htm) after applying \r\na patch to make it compatible with the USB2AX.\r\n\r\nA particular advantage of this is that in addition to the funtionality you would expect this library\r\nalso supports the \r\n[SYNC_READ](http://www.xevelabs.com/doku.php?id=product:usb2ax:advanced_instructions) \r\ncommand that the USB2AX provides for faster reads from multiple servos.\r\n\r\n## Requirements\r\n\r\nPython 2.7 and Cython.\r\n\r\n## Installation\r\n\r\n    git clone git://github.com/jthorniley/pyusb2ax.git\r\n    cd pyusb2ax\r\n    python setup.py install\r\n    \r\nThis does the following:\r\n\r\n* Downloads the Dynamixel SDK\r\n* Patches it to make it compatible with the USB2AX.\r\n * Specifically, that means turn the dxl_hal.c file into something more like Nicholas Saugnier's [modified verision](https://paranoidstudio.assembla.com/code/paranoidstudio/git/node/blob/master/usb2ax/soft/dxl_hal.c). This is useful/necessary because the USB2AX does not behave exactly the same as the USB2Dynamixel with the SDK expects.\r\n * And makes modifications to allow passing the sync_read instruction through the API.\r\n* Creates a module called <tt>usb2ax</tt> which provides easy access to the dynamixel library from Python via the\r\n  methods illustrated below.\r\n\r\n## Example\r\n\r\n### Serial read/write\r\n```python\r\nimport usb2ax\r\n\r\nusb2ax.initialize(0) # Expects to see the USB2AX at /dev/ttyACM0\r\nusb2ax.write(1,\"goal_position\",512) # Move the servo with ID 1 to position 512\r\n                                    # (valid values are 0-1024, 512 is in the middle)\r\n\r\nprint usb2ax.read(1,\"present_position\") # Prints the actual position reported by the dynamixel.\r\n```\r\n\r\n### Sync read/write\r\n\r\nNote that sync read/write should generally be faster.\r\n\r\nSee the file example.py for another usage of this.\r\n\r\n```python    \r\nimport usb2ax\r\n\r\nusb2ax.initialize(0)\r\n\r\nusb2ax.sync_write([1,2],\"goal_position\",[600,400]) # Move servo 1 to 600 and servo 2 to 400\r\ndata = usb2ax.sync_read([1,2],\"present_position\") # Sync read\r\nprint data[0] # Position of servo 1\r\nprint data[1] # Position of servo 2\r\n```\r\n\r\n## Available commands\r\n\r\nThe library currently supports reading and writing via the above convention to\r\nthe following AX12 control table addresses. Details of these settings can be found\r\nin the [AX12 manual](http://support.robotis.com/en/product/dynamixel/ax_series/dxl_ax_actuator.htm).\r\n\r\nThe <tt>read</tt> and <tt>write</tt> functions will raise exceptions if you\r\ntry to access something not listed below, or try to write to something listed\r\nas read-only.\r\n\r\n\r\n<table>\r\n<tr><th>Parameter</th><th>Control table address</th><th>Read-only (R) or Read/Write(R/W)</th></tr>\r\n<tr><td>model_no</td><td>0x00</td><td>R</td></tr>\r\n<tr><td>firmware_version</td><td>0x02</td><td>R</td></tr>\r\n<tr><td>id</td><td>0x03</td><td>R/W</td></tr>\r\n<tr><td>baud_rate</td><td>0x04</td><td>R/W</td></tr>\r\n<tr><td>return_delay_time</td><td>0x05</td><td>R/W</td></tr>\r\n<tr><td>cw_angle_limit</td><td>0x06</td><td>R/W</td></tr>\r\n<tr><td>ccw_angle_limit</td><td>0x08</td><td>R/W</td></tr>\r\n<tr><td>max_torque</td><td>0x0e</td><td>R/W</td></tr>\r\n<tr><td>torque_enable</td><td>0x18</td><td>R/W</td></tr>\r\n<tr><td>cw_compliance_margin</td><td>0x1a</td><td>R/W</td></tr>\r\n<tr><td>ccw_compliance_margin</td><td>0x1b</td><td>R/W</td></tr>\r\n<tr><td>cw_compliance_slope</td><td>0x1c</td><td>R/W</td></tr>\r\n<tr><td>ccw_compliance_slope</td><td>0x1d</td><td>R/W</td></tr>\r\n<tr><td>goal_position</td><td>0x1e</td><td>R/W</td></tr>\r\n<tr><td>moving_speed</td><td>0x20</td><td>R/W</td></tr>\r\n<tr><td>torque_limit</td><td>0x22</td><td>R/W</td></tr>\r\n<tr><td>present_position</td><td>0x24</td><td>R</td></tr>\r\n<tr><td>present_speed</td><td>0x26</td><td>R</td></tr>\r\n<tr><td>present_load</td><td>0x28</td><td>R</td></tr>\r\n<tr><td>punch</td><td>0x30</td><td>R/W</td></tr>\r\n</table>\r\n\r\n## Troubleshooting\r\n\r\n### Baud rate\r\n\r\nCurrently you can only use the 1Mhz baud rate setting. This is the default setting for most AX 12 servos. If yours is set to something else, you will need to change it via some other method by writing 1 to the control table addres 0x04.\r\n\r\n### Connection problems\r\n\r\nIf you get this error message:\r\n\r\n    usb2ax.InitError: There was a problem connecting to the USB2AX at /dev/ttyACM0\r\n\r\nTry first running dmesg to check that the USB2AX is connecting correctly, you should see something\r\nlike\r\n\r\n    [ 9216.979357] usb 3-3.3: new full-speed USB device number 21 using xhci_hcd\r\n    [ 9216.992828] usb 3-3.3: New USB device found, idVendor=16d0, idProduct=06a7\r\n    [ 9216.992839] usb 3-3.3: New USB device strings: Mfr=1, Product=2, SerialNumber=220\r\n    [ 9216.992845] usb 3-3.3: Product: USB2AX\r\n    [ 9216.992849] usb 3-3.3: Manufacturer: Xevelabs\r\n    [ 9216.992853] usb 3-3.3: SerialNumber: 6403635373035121E161\r\n    [ 9216.993668] usb 3-3.3: ep 0x82 - rounding interval to 1024 microframes, ep desc says 2040 microframes\r\n    [ 9216.994410] cdc_acm 3-3.3:1.0: ttyACM0: USB ACM device\r\n\r\nNote the name <tt>ttyACM0</tt> -- if you get something else like <tt>ttyACM1</tt> then\r\nyou need to call <tt>usb2ax.initialize(1)</tt>.\r\n\r\nCheck the permissions on the device. You will probably see something like this:\r\n\r\n    $ ls -lh /dev/ttyACM0 \r\n    crw-rw----. 1 root dialout 166, 0 Jun  4 11:55 /dev/ttyACM0\r\n\r\nNote the group name <tt>dialout</tt>. Check your user's current groups with <tt>groups</tt>.\r\nYou may need to add your user to the dialout group:\r\n\r\n    $ usermod -a -G dialout <your_username>\r\n\r\nThe group change only takes effect when you login. So either logout then in again, or if you are in\r\na terminal you can do <tt>su - your_username</tt> to get a new login session.\r\n\r\nFinally, if you have modem-manager running (which might be the case on complete desktop\r\nLinux installs, probably less likely to be a problem on Raspberry Pi etc), it\r\nmay lock access to the serial port. Try\r\n<tt>sudo killall modem-manager</tt>. If that works, you may be able to get rid of it permanently by doing\r\n\r\n    $ cd /usr/share/dbus-1/system-services\r\n    $ mv org.freedesktop.ModemManager.service org.freedesktop.ModemManager.service.disabled\r\n\r\nIf you still have problems, check if anything else is locking the serial port with\r\n\r\n    $ sudo lsof | grep ACM\r\n\r\nThe output of this should ideally be nothing. If it isn't, try and get rid of whatever is there.\r\n\r\n## TODO\r\n\r\nSupport all the parameter settings.\r\n\r\nBetter documentation.\r\n\r\nInterface for setting angles in radians.\r\n\r\n","google":"UA-41449164-1","note":"Don't delete this file! It's used internally to help with page regeneration."}